source('//wurnet.nl/Homes/siebr007/My Documents/Geoscripting/Tim_Koen.R')
countrymap("NLD", 2)
countrymap("NLD", 0)
countrymap("FRA", 0)
countrymap("FRA", 1)
countrymap("FRA", 2)
adm1
adm1 <- raster::getData("GADM", country = country1, level = level1, path = datdir)
datdir <- 'data'
dir.create(datdir, showWarnings = FALSE)
adm1 <- raster::getData("GADM", country = country1, level = level1, path = datdir)
countrymap("FRA", 2)
adm1$
)
adm
country1 = "FRA"
level1 = 2
datdir <- 'data'
dir.create(datdir, showWarnings = FALSE)
adm1 <- raster::getData("GADM", country = country1, level = level1, path = datdir)
source('//wurnet.nl/Homes/siebr007/My Documents/Geoscripting/Excercise1_UPD.R')
createmap(countries, level2, level1)
createmap(countries, level1, level1)
createmap(countries, level0, level1)
??add
??add$
adm@
)
??adm@
)
library(raster)
install.packages("raster")
install.packages("spatstat")
install.packages("rgeos")
library(raster)
library(spatstat)
library(rgeos)
ned <- raster::getData('alt', country='NLD', mask=TRUE) ## SRTM 90m height data
nedshp <- raster::getData('GADM', country='NLD', level=2) ## administrative boundaries
dran <- runifpoint(500, win = as.vector(extent(NLD)))
dran <- runifpoint(500, win = as.vector(extent(ned)))
S <- SpatialPoints(data.frame(x = dran$x, y = dran$y),
proj4string = CRS(proj4string(nedshp)))
Sint <- gIntersection(S, nedshp)
plot(ned)
plot(nedshp, add=TRUE)
plot(Sint, add = TRUE, col = "red", pch = 19, cex = 0.2)
out <- extract(ned, Sint, df = TRUE)
colnames(out) <- c("id", "height")
head(out)
plot(out, type = "p", pch = 19)
source('//wurnet.nl/Homes/siebr007/My Documents/Geoscripting/GS_GIT/best_script_ever.R')
source('//wurnet.nl/Homes/siebr007/My Documents/Geoscripting/GS_GIT/best_script_ever.R')
source('//wurnet.nl/Homes/siebr007/My Documents/Geoscripting/GS_GIT/best_script_ever.R')
source('//wurnet.nl/Homes/siebr007/My Documents/Geoscripting/GS_GIT/best_script_ever.R')
best_script_ever()
source('//wurnet.nl/Homes/siebr007/My Documents/Geoscripting/GS_GIT/best_script_ever.R')
source('//wurnet.nl/Homes/siebr007/My Documents/Geoscripting/GS_GIT/best_script_ever.R')
source('//wurnet.nl/Homes/siebr007/My Documents/Geoscripting/GS_GIT/best_script_ever.R')
source('//wurnet.nl/Homes/siebr007/My Documents/Geoscripting/GS_GIT/Project_1/main.R')
?raster
a = c(1, 2, 3, 4, 5)
a[a < 2] = 0
a
data(cars)
1 + 2
data(cars)
getwd()
setwd("M:/My Documents/Geoscripting/GS_GIT"
)
data(cars)
class(cars)
head(cars)
?head
tails(cars)
tail(cars)
?cars
plot(cars)
library(sp)
library(sp)
data(meuse)
class(meuse)
?coordinates
coordinates(meuse) = c("x", "y")
coordinates(meuse)
class(meuse)
?bubble
bubble(meuse, "zinc", maxsize = 2.5, main = "zinc concentrations (ppm", key.entries = 2^(-1:4))
?sp
summary(meuse)
??proj4string
data("meuse.riv")
meuse.sr = SpatialPolygons(list(Polygons(list(Polygon(meuse.riv)), "meuse.riv")))
data("meuse.grid")
coordiantes(meuse.grid) = c("x", "y")
coordinates(meuse.grid) = c("x", "y")
gridded(meuse.grid) = TRUE
?spplot
spplot(meuse.grid, col.regions = bpy.colors(), main = "meuse.grid", sp.layout=list())
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
spplot(meuse.grid, col.regions=bpy.colors(), main = "meuse.grid", sp.layout=list(
list("sp.polygons", meuse.sr),
list("sp.points", meuse, pch="+", col="black")
)
)
?list
source('M:/My Documents/Geoscripting/GS_GIT/pr_structure_example/R/ageCalculator.R')
ageCalculator(1992)
library(raster)
c = raster(ncol=10, nrow=10)
c
plot(c)
coordinates(c) = c("x", "y")
summary(c)
class(c)
d = stack(c, c)
class(d)
class(c)
e = brick(d)
e
class(e)
?sprintf
source('~/.active-rstudio-document')
HelloWorld('Jasper')
HelloWorld(23)
source('~/.active-rstudio-document')
HelloWorld(21)
HelloWorld("Jasper")
source('~/.active-rstudio-document')
HelloWorld("Jasper")
is.character('sdf')
if (is.character('sf') 'You did it')
if (is.character('sf'))  'You did it'
if (is.character(12))  'You did it'
class(12) == 'numeric'
source('M:/My Documents/Geoscripting/GS_GIT/pr_structure_example/R/minusRaster.R')
plot(r2)
plot(r)
plot(z)
??ncell
??n=ncell
??cell
a = raster(nrow=50, ncol=50)
a
class(a)
50 * 50
class(a)
?floor
a[] = floor(rnorm(n=ncell(a)))
freq(a, value=-2)
a = raster(nrow=50, ncol=50)
a[] = floor(rnorm(n=ncell(a)))
freq(a, value=-2)
a = raster(nrow=50, ncol=50)
a[] = floor(rnorm)(n=ncell(a))
a[] = floor(rnorm(n=ncell(a)))
freq(a, value=-2)
a[]
a = raster(nrow=50, ncol=50)
a[]
a = raster(nrow=50, ncol=50)
a[]
a[] = floor(rnorm(n=ncell(a)))
a[]
freq(a, value=-2)
a
a[]
b = a
c = NA
list = c(a, b, c)
list
plot(list)
listr
list
out = list()
?list()
for (i in 1:length(list)) {}
source('~/.active-rstudio-document')
freq(a, value=-2)
freq(a, value=-2)
b = a
c = NA
list = c(a, b, c)
out = list()
for (i in 1:length(list)) {
out[i] = freq(list[[i]], value=-2)
}
?try
fun = function(x, value) {
tr = try(freq(x=x, value=value), silent=TRUE)
if (class(tr) == 'try-error') {
return ('This object returned an error')
} else {
return(tr)
}
}
out = list()
for (i in 1:length(list)) {
out[i] = fun(list[[i]], value=-2)
}
out
(out = sapply(X=list, FUN=fun, value=-2))
traceback()
foo = function(x) {
x = x +2
print(x)
bar(x)
}
?print
a = 12
print(a)
b = print(abbreviate())
b = print(a)
b
c = b + 2
c
bar = function(x) {
x = x + a.variable.whichdoes.not.exit
print(x)
}
foo(2)
traceback()
a = NA
class(a)
